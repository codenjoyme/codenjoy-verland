package com.codenjoy.dojo.minesweeper.client.ai;

import com.codenjoy.dojo.client.Solver;
import com.codenjoy.dojo.minesweeper.client.Board;
import com.codenjoy.dojo.services.Dice;
import com.codenjoy.dojo.services.Direction;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class AISolverTest {

    private Dice dice;
    private Solver ai;

    @Before
    public void setup() {
        dice = mock(Dice.class);
        ai = new AISolver(dice);
    }

    private Board board(String board) {
        return (Board) new Board().forString(board);
    }

    private void asertAI(String board, String expected) {
        String actual = ai.get(board(board));
        assertEquals(expected, actual);
    }

    private void dice(Direction direction) {
        when(dice.next(anyInt())).thenReturn(direction.value());
    }

    // проверяем что мы можем заходить в узкие проходы,
    // для этого анализиурем что было под героем в прошлом тике
    @Test
    public void should() {
        asertAI("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼     1*1    *☼" +
                "☼ 1121211    *☼" +
                "☼ 1***1      *☼" +
                "☼ 11*11 111  *☼" +
                "☼  1*1  1*1  *☼" +
                "☼  1*1 12*1  *☼" +
                "☼ 1221 1**1  *☼" +
                "☼ 1*1  12*1  *☼" +
                "☼ 111   111  *☼" +
                "☼     111    *☼" +
                "☼     1*1    *☼" +
                "☼  1111*1    *☼" +
                "☼  1******☺  *☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "LEFT");

        asertAI("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼     1*1    *☼" +
                "☼ 1121211    *☼" +
                "☼ 1***1      *☼" +
                "☼ 11*11 111  *☼" +
                "☼  1*1  1*1  *☼" +
                "☼  1*1 12*1  *☼" +
                "☼ 1221 1**1  *☼" +
                "☼ 1*1  12*1  *☼" +
                "☼ 111   111  *☼" +
                "☼     111    *☼" +
                "☼     1*1    *☼" +
                "☼  1111*1    *☼" +
                "☼  1*****☺   *☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "LEFT");

        asertAI("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼     1*1    *☼" +
                "☼ 1121211    *☼" +
                "☼ 1***1      *☼" +
                "☼ 11*11 111  *☼" +
                "☼  1*1  1*1  *☼" +
                "☼  1*1 12*1  *☼" +
                "☼ 1221 1**1  *☼" +
                "☼ 1*1  12*1  *☼" +
                "☼ 111   111  *☼" +
                "☼     111    *☼" +
                "☼     1*1    *☼" +
                "☼  1111*1    *☼" +
                "☼  1****☺    *☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "RIGHT");

        asertAI("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼     1*1    *☼" +
                "☼ 1121211    *☼" +
                "☼ 1***1      *☼" +
                "☼ 11*11 111  *☼" +
                "☼  1*1  1*1  *☼" +
                "☼  1*1 12*1  *☼" +
                "☼ 1221 1**1  *☼" +
                "☼ 1*1  12*1  *☼" +
                "☼ 111   111  *☼" +
                "☼     111    *☼" +
                "☼     1*1    *☼" +
                "☼  1111*1    *☼" +
                "☼  1**** ☺   *☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "LEFT");

        asertAI("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼     1*1    *☼" +
                "☼ 1121211    *☼" +
                "☼ 1***1      *☼" +
                "☼ 11*11 111  *☼" +
                "☼  1*1  1*1  *☼" +
                "☼  1*1 12*1  *☼" +
                "☼ 1221 1**1  *☼" +
                "☼ 1*1  12*1  *☼" +
                "☼ 111   111  *☼" +
                "☼     111    *☼" +
                "☼     1*1    *☼" +
                "☼  1111*1    *☼" +
                "☼  1****☺    *☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "LEFT");

        asertAI("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼     1*1    *☼" +
                "☼ 1121211    *☼" +
                "☼ 1***1      *☼" +
                "☼ 11*11 111  *☼" +
                "☼  1*1  1*1  *☼" +
                "☼  1*1 12*1  *☼" +
                "☼ 1221 1**1  *☼" +
                "☼ 1*1  12*1  *☼" +
                "☼ 111   111  *☼" +
                "☼     111    *☼" +
                "☼     1*1    *☼" +
                "☼  1111*1    *☼" +
                "☼  1***☺     *☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "UP");

        asertAI("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼     1*1    *☼" +
                "☼ 1121211    *☼" +
                "☼ 1***1      *☼" +
                "☼ 11*11 111  *☼" +
                "☼  1*1  1*1  *☼" +
                "☼  1*1 12*1  *☼" +
                "☼ 1221 1**1  *☼" +
                "☼ 1*1  12*1  *☼" +
                "☼ 111   111  *☼" +
                "☼     111    *☼" +
                "☼     1*1    *☼" +
                "☼  1111☺1    *☼" +
                "☼  1***      *☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "LEFT");

        asertAI("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼     1*1    *☼" +
                "☼ 1121211    *☼" +
                "☼ 1***1      *☼" +
                "☼ 11*11 111  *☼" +
                "☼  1*1  1*1  *☼" +
                "☼  1*1 12*1  *☼" +
                "☼ 1221 1**1  *☼" +
                "☼ 1*1  12*1  *☼" +
                "☼ 111   111  *☼" +
                "☼     111    *☼" +
                "☼     1*1    *☼" +
                "☼  111☺11    *☼" +
                "☼  1***      *☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");

        asertAI("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼     1*1    *☼" +
                "☼ 1121211    *☼" +
                "☼ 1***1      *☼" +
                "☼ 11*11 111  *☼" +
                "☼  1*1  1*1  *☼" +
                "☼  1*1 12*1  *☼" +
                "☼ 1221 1**1  *☼" +
                "☼ 1*1  12*1  *☼" +
                "☼ 111   111  *☼" +
                "☼     111    *☼" +
                "☼     1*1    *☼" +
                "☼  111111    *☼" +
                "☼  1**☺      *☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "RIGHT");

        asertAI("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼     1*1    *☼" +
                "☼ 1121211    *☼" +
                "☼ 1***1      *☼" +
                "☼ 11*11 111  *☼" +
                "☼  1*1  1*1  *☼" +
                "☼  1*1 12*1  *☼" +
                "☼ 1221 1**1  *☼" +
                "☼ 1*1  12*1  *☼" +
                "☼ 111   111  *☼" +
                "☼     111    *☼" +
                "☼     1*1    *☼" +
                "☼  111111    *☼" +
                "☼  1*☺       *☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "ACT,LEFT");
    }

}